<?php
/**
 * @file
 * Contains hook implementations and commonly used functions for
 * component styles.
 */

/**
 * Constant for the pane type.
 */
define('COMPONENT_STYLES_TYPE_PANE', 'pane');

/**
 * Constant for the region type.
 */
define('COMPONENT_STYLES_TYPE_REGION', 'region');

/**
 * Implements hook_ctools_plugin_directory().
 */
function component_styles_ctools_plugin_directory($module, $plugin) {
  if ($module == 'page_manager' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_permission().
 */
function component_styles_permission() {
  return array(
    'component styles advanced' => array(
      'title' => t('Advanced Styling Options'),
      'description' => t('Allows the user to make advanced styling
        decisions in this module.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function component_styles_theme() {
  return array(
    'component_styles_widget' => array(
      'render element' => 'component_styles_widget',
      'file' => 'component_styles.theme.inc',
    ),
  );
}

/**
 * Builds the list of component style form categories.
 * 
 * @param string $type 
 *   Either "pane" or "region".
 * @param boolean $reset
 *   Set to TRUE to reset the caches.
 * 
 * @return array
 *   An array of component styles information, translated
 *   into the appropriate language for the current user interface.
 */
function component_styles_get_form_categories($type, $reset = FALSE) {
  global $language;
  $cstyles = drupal_static(__FUNCTION__, array());
  if ($reset || empty($cstyles)) {
    $cached = cache_get(__FUNCTION__);
    if ((!$reset) && (!empty($cached))) {
      $cstyles = $cached->data;
    }
  }
  if (empty($cstyles[$type][$language->language])) {
    $cstyles[$type][$language->language] = module_invoke_all('component_styles', $type);
    drupal_alter('component_styles', $cstyles[$type][$language->language], $type);
    cache_set(__FUNCTION__, $cstyles);
  }
  return $cstyles[$type][$language->language];
}


/**
 * Helper function to adjust the render array.
 * 
 * Uses $options (which contains CSS/JS files and CSS classes) to
 * append data to the $content render array.
 * 
 * @param array $options
 *   An array of options, including some or all of the following:
 *   - use content wrapper: Render a wrapper around the content
 *   - use parent wrapper: Render a wrapper around the widget container
 *   - tag: The tag for the widget container
 *   - parent tag: The tag for the wrapper around the container
 *   - wrapper tag: The tag for the wrapper around the content
 *   - classes: A single class (string) or an array of classes for
 *     the widget container.
 *   - parent classes: Classes for the wrapper around the container
 *   - wrapper classes: Classes for the wrapper around the content
 *   - js: one or more Javascript files to attach
 *   - css: one or more CSS files to attach
 *   - remove classes: Classes to remove from the widget container
 *   - remove parent classes: Classes to remove from the parent wrapper
 *   - remove wrapper classes: Classes to remove from the content wrapper
 * @param array $content
 *   The render array to adjust.
 */
function _component_styles_render_helper($options, &$content) {
  $adjusted = array(
    '#classes' => array(),
    '#parent_classes' => array(),
    '#ignore_classes' => array(),
    '#parent_ignore_classes' => array(),
    '#wrapper_classes' => array(),
    '#wrapper_ignore_classes' => array(),
    '#attach' => array(
      'js' => array(),
      'css' => array(),
    ),
  );
  if (!empty($options['tag'])) {
    $content['cs_render_div']['#tag'] = $options['tag'];
  }
  if (!empty($options['parent tag'])) {
    $content['cs_render_div']['#parent_tag'] = $options['parent tag'];
  }
  if (!empty($options['wrapper tag'])) {
    $content['cs_render_div']['#wrapper_tag'] = $options['wrapper tag'];
  }
  if (!empty($options['classes'])) {
    $adjusted['#classes'] = is_array($options['classes']) ? $options['classes'] : explode(' ', $options['classes']);
  }
  if (!empty($options['parent classes'])) {
    $adjusted['#parent_classes'] = is_array($options['parent classes']) ? $options['parent classes'] : explode(' ', $options['parent classes']);
    $options['use parent wrapper'] = TRUE;
  }
  if (!empty($options['wrapper classes'])) {
    $adjusted['#wrapper_classes'] = is_array($options['wrapper classes']) ? $options['wrapper classes'] : explode(' ', $options['wrapper classes']);
    $options['use content wrapper'] = TRUE;
  }
  if (!empty($options['js'])) {
    $adjusted['#attach']['js'] = is_array($options['js']) ? $options['js'] : array($options['js']);
  }
  if (!empty($options['css'])) {
    $adjusted['#attach']['css'] = is_array($options['css']) ? $options['css'] : array($options['css']);
  }
  if (!empty($options['remove classes'])) {
    $adjusted['#ignore_classes'] = is_array($options['remove classes']) ? $options['remove classes'] : explode(' ', $options['remove classes']);
  }
  if (!empty($options['remove parent classes'])) {
    $adjusted['#parent_ignore_classes'] = is_array($options['remove parent classes']) ? $options['remove parent classes'] : explode(' ', $options['remove parent classes']);
  }
  if (!empty($options['remove wrapper classes'])) {
    $adjusted['#wrapper_ignore_classes'] = is_array($options['remove wrapper classes']) ? $options['remove wrapper classes'] : explode(' ', $options['remove wrapper classes']);
  }
  foreach ($adjusted as $key => $value) {
    $content['cs_render_div'][$key] = array_merge_recursive($content['cs_render_div'][$key], $value);
  }
  if (!empty($options['use content wrapper'])) {
    $content['cs_render_div']['#content_wrapper'] = TRUE;
  }
  if (!empty($options['use parent wrapper'])) {
    $content['cs_render_div']['#parent_wrapper'] = TRUE;
  }
}
